// 괄호 회전하기
// 문제 설명
// 다음 규칙을 지키는 문자열을 올바른 괄호 문자열이라고 정의합니다.

// (), [], {} 는 모두 올바른 괄호 문자열입니다.
// 만약 A가 올바른 괄호 문자열이라면, (A), [A], {A} 도 올바른 괄호 문자열입니다. 예를 들어, [] 가 올바른 괄호 문자열이므로, ([]) 도 올바른 괄호 문자열입니다.
// 만약 A, B가 올바른 괄호 문자열이라면, AB 도 올바른 괄호 문자열입니다. 예를 들어, {} 와 ([]) 가 올바른 괄호 문자열이므로, {}([]) 도 올바른 괄호 문자열입니다.
// 대괄호, 중괄호, 그리고 소괄호로 이루어진 문자열 s가 매개변수로 주어집니다. 이 s를 왼쪽으로 x (0 ≤ x < (s의 길이)) 칸만큼 회전시켰을 때 s가 올바른 괄호 문자열이 되게 하는 x의 개수를 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// s의 길이는 1 이상 1,000 이하입니다.

// 입출력 예
//    s	      result
// "[](){}"   	3
// "}]()[{"	    2
// "[)(]"	      0
// "}}}"	      0

// 입출력 예 설명
// 입출력 예 #1
// 다음 표는 "[](){}" 를 회전시킨 모습을 나타낸 것입니다.
// x	    s를 왼쪽으로 x칸만큼 회전	    올바른 괄호 문자열?
// 0	        "[](){}"	                O
// 1	        "](){}["	                X
// 2	        "(){}[]"	                O
// 3	        "){}[]("	                X
// 4	        "{}[]()"	                O
// 5	        "}[](){"	                X

// 올바른 괄호 문자열이 되는 x가 3개이므로, 3을 return 해야 합니다.

// ---------------------------------------------------------------------------------------------------- //

/*
최근에 풀었던 괄호 짝이 맞는지 확인 하는 문제와 기본적인 내용은 동일한 문제이다.
문제를 잘못읽어서 몇 x 만큼 회전시켰을때 짝이 맞는 괄호가 되는지 찾는 문제로 생각해서 잘못풀고있었다.
다음부턴 문제를 집중해서 보자.

s를 순회하면서 s의 첫번째 인덱스를 stack에 넣어준다.
s의 다음 인덱스를 확인할때 stack의 마지막 값과 짝이 맞는지 확인한다.
짝이 맞다면 stack을 pop()하고 확인중인 s의 요소도 stack에 push하지않는다.
짝이 맞지 않다면 s의 요소를 stack에 push 한다.
마지막까지 확인하고 stack이 비워져있다면 s는 올바른 괄호이다. (answer += 1)

s의 길이만큼 s의 0번째 인덱스를 마지막으로 옮기는 과정을 반복하면서 위 과정을 확인한다.
s의 길이가 최대 1,000 까지 이기 때문에 이중루프로 풀이가 가능하다. 
*/

function solution(s) {
  let answer = 0;
  let str = s;
  const strLen = s.length;
  const brackets = { "(": ")", "{": "}", "[": "]" };

  for (let i = 0; i < strLen; i++) {
    const stack = [];
    for (let j = 0; j < strLen; j++) {
      const lastStack = stack.pop();
      if (!lastStack) stack.push(str[j]);
      else if (brackets[lastStack] !== str[j]) stack.push(lastStack, str[j]);
    }
    if (!stack.length) answer++;
    str = str.slice(1) + str[0];
  }

  return answer;
}
