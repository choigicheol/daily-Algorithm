// 카펫
// 문제 설명
// Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.

// carpet.png

// Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.

// Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.

// 제한사항
// 갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.
// 노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.
// 카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.
// 입출력 예
// brown	yellow	return
// 10	2	[4, 3]
// 8	1	[3, 3]
// 24	24	[8, 6]

// ---------------------------------------------------------------------------------------------------- //

/*
완전탐색 문제라고해서 bfs or dfs를 이용해야 하나 생각했는데 수학적으로 푸는게 더 간단하다고 생각했다.
brown과 yellow를 더하면 카펫의 전체 격자 갯수가 된다.
brown이 테두리로 존재해야하기 때문에 최소 3줄 이상이어여 한다. => 전체 갯수를 3이상의 자연수로 나누었을때 딱 떨어지는 수를 구한다.

카펫 세로 = 나누는 수
카펫 가로 = 전체 갯수 / 세로

테두리가 brown으로 감싸져있기 때문에 yellow의 갯수는 (카펫 가로-2) * (카펫 세로-2) 이다.
카펫의 가로, 세로로 가능한 경우 중 위의 조건에 맞는 수를 찾으면 된다.
*/

function solution(brown, yellow) {
  const total = brown + yellow;

  for (let i = 3; i <= total / 3; i++) {
    if (!(total % i)) {
      const height = i;
      const width = total / height;
      if ((width - 2) * (height - 2) === yellow) return [width, height];
    }
  }
}
