// 할인 행사

// 문제 설명
// XYZ 마트는 일정한 금액을 지불하면 10일 동안 회원 자격을 부여합니다.
// XYZ 마트에서는 회원을 대상으로 매일 한 가지 제품을 할인하는 행사를 합니다.
// 할인하는 제품은 하루에 하나씩만 구매할 수 있습니다.
// 알뜰한 정현이는 자신이 원하는 제품과 수량이 할인하는 날짜와 10일 연속으로 일치할 경우에 맞춰서 회원가입을 하려 합니다.

// 예를 들어, 정현이가 원하는 제품이 바나나 3개, 사과 2개, 쌀 2개, 돼지고기 2개, 냄비 1개이며,
// XYZ 마트에서 14일간 회원을 대상으로 할인하는 제품이 날짜 순서대로 치킨, 사과, 사과, 바나나, 쌀, 사과, 돼지고기, 바나나, 돼지고기, 쌀, 냄비, 바나나, 사과, 바나나인 경우에 대해 알아봅시다.
// 첫째 날부터 열흘 간에는 냄비가 할인하지 않기 때문에 첫째 날에는 회원가입을 하지 않습니다.
// 둘째 날부터 열흘 간에는 바나나를 원하는 만큼 할인구매할 수 없기 때문에 둘째 날에도 회원가입을 하지 않습니다.
// 셋째 날, 넷째 날, 다섯째 날부터 각각 열흘은 원하는 제품과 수량이 일치하기 때문에 셋 중 하루에 회원가입을 하려 합니다.

// 정현이가 원하는 제품을 나타내는 문자열 배열 want와 정현이가 원하는 제품의 수량을 나타내는 정수 배열 number,
// XYZ 마트에서 할인하는 제품을 나타내는 문자열 배열 discount가 주어졌을 때,
// 회원등록시 정현이가 원하는 제품을 모두 할인 받을 수 있는 회원등록 날짜의 총 일수를 return 하는 solution 함수를 완성하시오. 가능한 날이 없으면 0을 return 합니다.

// 제한사항
// 1 ≤ want의 길이 = number의 길이 ≤ 10

// 1 ≤ number의 원소 ≤ 10
// number[i]는 want[i]의 수량을 의미하며, number의 원소의 합은 10입니다.

// 10 ≤ discount의 길이 ≤ 100,000
// want와 discount의 원소들은 알파벳 소문자로 이루어진 문자열입니다.
// 1 ≤ want의 원소의 길이, discount의 원소의 길이 ≤ 12

// 입출력 예
// want
// ["banana", "apple", "rice", "pork", "pot"]

// number
// [3, 2, 2, 2, 1]

// discount
// ["chicken", "apple", "apple", "banana", "rice", "apple", "pork", "banana", "pork", "rice", "pot", "banana", "apple", "banana"]

// result
// 3

// < --------------------------- >

// want
// ["apple"]

// number
// [10]

// discount
// ["banana", "banana", "banana", "banana", "banana", "banana", "banana", "banana", "banana", "banana"]

// result
// 0

// 입출력 예 #2
// 사과가 할인하는 날이 없으므로 0을 return 합니다.

// < --------------------------- >

function solution(want, number, discount) {
    let answer = 0;

    for (let i = 0; i < discount.length - 9; i++) {
        const sliceDiscount = discount.slice(i, i + 10);

        let flag = true;

        for (let j = 0; j < want.length; j++) {
            if (sliceDiscount.filter((item) => item === want[j]).length !== number[j]) {
                flag = false;
                break;
            }
        }

        if (flag) answer += 1;
    }

    return answer;
}

// -----------------------------------------------------------------------------------------------------------------------

// 피로도
// 문제 설명
// XX게임에는 피로도 시스템(0 이상의 정수로 표현합니다)이 있으며, 일정 피로도를 사용해서 던전을 탐험할 수 있습니다.
// 이때, 각 던전마다 탐험을 시작하기 위해 필요한 "최소 필요 피로도"와 던전 탐험을 마쳤을 때 소모되는 "소모 피로도"가 있습니다.
// "최소 필요 피로도"는 해당 던전을 탐험하기 위해 가지고 있어야 하는 최소한의 피로도를 나타내며, "소모 피로도"는 던전을 탐험한 후 소모되는 피로도를 나타냅니다.
// 예를 들어 "최소 필요 피로도"가 80, "소모 피로도"가 20인 던전을 탐험하기 위해서는 유저의 현재 남은 피로도는 80 이상 이어야 하며, 던전을 탐험한 후에는 피로도 20이 소모됩니다.

// 이 게임에는 하루에 한 번씩 탐험할 수 있는 던전이 여러개 있는데, 한 유저가 오늘 이 던전들을 최대한 많이 탐험하려 합니다.
// 유저의 현재 피로도 k와 각 던전별 "최소 필요 피로도", "소모 피로도"가 담긴 2차원 배열 dungeons 가 매개변수로 주어질 때,
// 유저가 탐험할수 있는 최대 던전 수를 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// k는 1 이상 5,000 이하인 자연수입니다.
// dungeons의 세로(행) 길이(즉, 던전의 개수)는 1 이상 8 이하입니다.
// dungeons의 가로(열) 길이는 2 입니다.
// dungeons의 각 행은 각 던전의 ["최소 필요 피로도", "소모 피로도"] 입니다.
// "최소 필요 피로도"는 항상 "소모 피로도"보다 크거나 같습니다.
// "최소 필요 피로도"와 "소모 피로도"는 1 이상 1,000 이하인 자연수입니다.
// 서로 다른 던전의 ["최소 필요 피로도", "소모 피로도"]가 서로 같을 수 있습니다.

// 입출력 예

// k
// 80

// dungeons
// [[80,20],[50,40],[30,10]]

// result
// 3

// 입출력 예 설명
// 현재 피로도는 80입니다.

// 만약, 첫 번째 → 두 번째 → 세 번째 던전 순서로 탐험한다면
// 현재 피로도는 80이며, 첫 번째 던전을 돌기위해 필요한 "최소 필요 피로도" 또한 80이므로, 첫 번째 던전을 탐험할 수 있습니다. 첫 번째 던전의 "소모 피로도"는 20이므로, 던전을 탐험한 후 남은 피로도는 60입니다.
// 남은 피로도는 60이며, 두 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 50이므로, 두 번째 던전을 탐험할 수 있습니다. 두 번째 던전의 "소모 피로도"는 40이므로, 던전을 탐험한 후 남은 피로도는 20입니다.
// 남은 피로도는 20이며, 세 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 30입니다. 따라서 세 번째 던전은 탐험할 수 없습니다.

// 만약, 첫 번째 → 세 번째 → 두 번째 던전 순서로 탐험한다면
// 현재 피로도는 80이며, 첫 번째 던전을 돌기위해 필요한 "최소 필요 피로도" 또한 80이므로, 첫 번째 던전을 탐험할 수 있습니다. 첫 번째 던전의 "소모 피로도"는 20이므로, 던전을 탐험한 후 남은 피로도는 60입니다.
// 남은 피로도는 60이며, 세 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 30이므로, 세 번째 던전을 탐험할 수 있습니다. 세 번째 던전의 "소모 피로도"는 10이므로, 던전을 탐험한 후 남은 피로도는 50입니다.
// 남은 피로도는 50이며, 두 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 50이므로, 두 번째 던전을 탐험할 수 있습니다. 두 번째 던전의 "소모 피로도"는 40이므로, 던전을 탐험한 후 남은 피로도는 10입니다.
// 따라서 이 경우 세 던전을 모두 탐험할 수 있으며, 유저가 탐험할 수 있는 최대 던전 수는 3입니다.

// < --------------------------- >

function solution(k, dungeons) {
    const cases = [];

    const findResult = (arr, count, k) => {
        if (!arr.length) cases.push(count);

        for (let i = 0; i < arr.length; i++) {
            let life = k;
            const copy = [...arr];
            const [a, b] = copy.splice(i, 1)[0];

            if (life >= a) findResult(copy, count + 1, life - b);
            else cases.push(count);
        }
    };

    findResult(dungeons, 0, k);

    return Math.max(...cases);
}
